
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087a  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b4  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006da3  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000270  00000000  00000000  0000857b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000087eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  00008813  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	5a d0       	rcall	.+180    	; 0x140 <main>
  8c:	95 c0       	rjmp	.+298    	; 0x1b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <display_digit>:
	} else {
		return counter + 1;
	}
}

void display_digit (char display, char digit) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	2e 97       	sbiw	r28, 0x0e	; 14
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	int time = 10;
	
	char sev_seg_num_code[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
  a4:	9a e0       	ldi	r25, 0x0A	; 10
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	de 01       	movw	r26, r28
  ac:	11 96       	adiw	r26, 0x01	; 1
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	9a 95       	dec	r25
  b4:	e1 f7       	brne	.-8      	; 0xae <display_digit+0x1e>
	char lcd_code[4] = {0x07, 0x0b, 0x0d, 0x0e};
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	9b 87       	std	Y+11, r25	; 0x0b
  ba:	9b e0       	ldi	r25, 0x0B	; 11
  bc:	9c 87       	std	Y+12, r25	; 0x0c
  be:	9d e0       	ldi	r25, 0x0D	; 13
  c0:	9d 87       	std	Y+13, r25	; 0x0d
  c2:	9e e0       	ldi	r25, 0x0E	; 14
  c4:	9e 87       	std	Y+14, r25	; 0x0e
		
		
	// turn-on display
	PORTC = lcd_code[display];
  c6:	fe 01       	movw	r30, r28
  c8:	e8 0f       	add	r30, r24
  ca:	f1 1d       	adc	r31, r1
  cc:	87 fd       	sbrc	r24, 7
  ce:	fa 95       	dec	r31
  d0:	83 85       	ldd	r24, Z+11	; 0x0b
  d2:	88 b9       	out	0x08, r24	; 8
	// send digit code
	PORTD = sev_seg_num_code[digit];
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e6 0f       	add	r30, r22
  de:	f1 1d       	adc	r31, r1
  e0:	67 fd       	sbrc	r22, 7
  e2:	fa 95       	dec	r31
  e4:	80 81       	ld	r24, Z
  e6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ec       	ldi	r24, 0xC3	; 195
  ea:	99 e0       	ldi	r25, 0x09	; 9
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <display_digit+0x5c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <display_digit+0x62>
  f2:	00 00       	nop
	
	_delay_ms(time);
}
  f4:	2e 96       	adiw	r28, 0x0e	; 14
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <display_number>:

void display_number (int num) {
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c0 e0       	ldi	r28, 0x00	; 0
	int i = 0;
	int number = num;
	
	for (i = 0; i < 4; i++) {
		display_digit(i, (number % 10));
 112:	0f 2e       	mov	r0, r31
 114:	fa e0       	ldi	r31, 0x0A	; 10
 116:	ef 2e       	mov	r14, r31
 118:	f1 2c       	mov	r15, r1
 11a:	f0 2d       	mov	r31, r0
 11c:	b7 01       	movw	r22, r14
 11e:	25 d0       	rcall	.+74     	; 0x16a <__divmodhi4>
 120:	16 2f       	mov	r17, r22
 122:	d7 2f       	mov	r29, r23
 124:	68 2f       	mov	r22, r24
 126:	8c 2f       	mov	r24, r28
 128:	b3 df       	rcall	.-154    	; 0x90 <display_digit>
		number /= 10;
 12a:	81 2f       	mov	r24, r17
 12c:	9d 2f       	mov	r25, r29
 12e:	cf 5f       	subi	r28, 0xFF	; 255

void display_number (int num) {
	int i = 0;
	int number = num;
	
	for (i = 0; i < 4; i++) {
 130:	c4 30       	cpi	r28, 0x04	; 4
 132:	a1 f7       	brne	.-24     	; 0x11c <display_number+0x16>
		display_digit(i, (number % 10));
		number /= 10;
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
	int counter = 0;
	
	DDRC = 0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
 144:	8a b9       	out	0x0a, r24	; 10
	}
}

int main(void)
{
	int counter = 0;
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>


int count_with_overflow(int counter) {
	if(counter > 9999) {
 14a:	00 31       	cpi	r16, 0x10	; 16
 14c:	87 e2       	ldi	r24, 0x27	; 39
 14e:	18 07       	cpc	r17, r24
 150:	1c f4       	brge	.+6      	; 0x158 <main+0x18>
		return 0;
	} else {
		return counter + 1;
 152:	0f 5f       	subi	r16, 0xFF	; 255
 154:	1f 4f       	sbci	r17, 0xFF	; 255
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x1c>
#include <util/delay.h>


int count_with_overflow(int counter) {
	if(counter > 9999) {
		return 0;
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	c9 e1       	ldi	r28, 0x19	; 25
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		counter = count_with_overflow(counter);
		
		// show same number 100 times, so the number will be displayed for 1 second
 		for (int i = 0; i < 25; i++)
 			display_number(counter);
 160:	c8 01       	movw	r24, r16
 162:	d1 df       	rcall	.-94     	; 0x106 <display_number>
 164:	21 97       	sbiw	r28, 0x01	; 1
	while (1)
	{
		counter = count_with_overflow(counter);
		
		// show same number 100 times, so the number will be displayed for 1 second
 		for (int i = 0; i < 25; i++)
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x20>
 168:	f0 cf       	rjmp	.-32     	; 0x14a <main+0xa>

0000016a <__divmodhi4>:
 16a:	97 fb       	bst	r25, 7
 16c:	07 2e       	mov	r0, r23
 16e:	16 f4       	brtc	.+4      	; 0x174 <__divmodhi4+0xa>
 170:	00 94       	com	r0
 172:	06 d0       	rcall	.+12     	; 0x180 <__divmodhi4_neg1>
 174:	77 fd       	sbrc	r23, 7
 176:	08 d0       	rcall	.+16     	; 0x188 <__divmodhi4_neg2>
 178:	0b d0       	rcall	.+22     	; 0x190 <__udivmodhi4>
 17a:	07 fc       	sbrc	r0, 7
 17c:	05 d0       	rcall	.+10     	; 0x188 <__divmodhi4_neg2>
 17e:	3e f4       	brtc	.+14     	; 0x18e <__divmodhi4_exit>

00000180 <__divmodhi4_neg1>:
 180:	90 95       	com	r25
 182:	81 95       	neg	r24
 184:	9f 4f       	sbci	r25, 0xFF	; 255
 186:	08 95       	ret

00000188 <__divmodhi4_neg2>:
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255

0000018e <__divmodhi4_exit>:
 18e:	08 95       	ret

00000190 <__udivmodhi4>:
 190:	aa 1b       	sub	r26, r26
 192:	bb 1b       	sub	r27, r27
 194:	51 e1       	ldi	r21, 0x11	; 17
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <__udivmodhi4_ep>

00000198 <__udivmodhi4_loop>:
 198:	aa 1f       	adc	r26, r26
 19a:	bb 1f       	adc	r27, r27
 19c:	a6 17       	cp	r26, r22
 19e:	b7 07       	cpc	r27, r23
 1a0:	10 f0       	brcs	.+4      	; 0x1a6 <__udivmodhi4_ep>
 1a2:	a6 1b       	sub	r26, r22
 1a4:	b7 0b       	sbc	r27, r23

000001a6 <__udivmodhi4_ep>:
 1a6:	88 1f       	adc	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	5a 95       	dec	r21
 1ac:	a9 f7       	brne	.-22     	; 0x198 <__udivmodhi4_loop>
 1ae:	80 95       	com	r24
 1b0:	90 95       	com	r25
 1b2:	bc 01       	movw	r22, r24
 1b4:	cd 01       	movw	r24, r26
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
